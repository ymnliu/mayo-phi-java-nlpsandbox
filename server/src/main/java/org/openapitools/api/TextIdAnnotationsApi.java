/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.TextIdAnnotation;
import org.openapitools.model.TextIdAnnotationRequest;
import org.openapitools.model.TextIdAnnotationResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.example.IdAnnotator;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-11T13:52:26.252409-07:00[America/Los_Angeles]")
@Validated
@Api(value = "textIdAnnotations", description = "the textIdAnnotations API")
public interface TextIdAnnotationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /textIdAnnotations : Annotate IDs in a clinical note
     * Return the ID annotations found in a clinical note
     *
     * @param textIdAnnotationRequest  (optional)
     * @return Success (status code 200)
     *         or Invalid request (status code 400)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @ApiOperation(value = "Annotate IDs in a clinical note", nickname = "createTextIdAnnotations", notes = "Return the ID annotations found in a clinical note", response = TextIdAnnotationResponse.class, tags={ "TextIdAnnotation", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = TextIdAnnotationResponse.class),
        @ApiResponse(code = 400, message = "Invalid request", response = Error.class),
        @ApiResponse(code = 500, message = "The request cannot be fulfilled due to an unexpected server error", response = Error.class) })
    @PostMapping(
        value = "/textIdAnnotations",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TextIdAnnotationResponse> createTextIdAnnotations(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) TextIdAnnotationRequest textIdAnnotationRequest) {
        String text = textIdAnnotationRequest.getNote().getText();
        List<TextIdAnnotation> annotations = new IdAnnotator()
            .annotate(text);
        TextIdAnnotationResponse res = new TextIdAnnotationResponse()
            .textIdAnnotations(annotations);

        return new ResponseEntity<TextIdAnnotationResponse>(res, HttpStatus.OK);
    }

}
