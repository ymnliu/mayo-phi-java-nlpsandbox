/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Error;
import org.openapitools.model.HealthCheck;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-08-11T13:52:26.252409-07:00[America/Los_Angeles]")
@Validated
@Api(value = "healthCheck", description = "the healthCheck API")
public interface HealthCheckApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /healthCheck : Get health check information
     * Get information about the health of the service
     *
     * @return Success (status code 200)
     *         or The specified resource was not found (status code 404)
     *         or The request cannot be fulfilled due to an unexpected server error (status code 500)
     */
    @ApiOperation(value = "Get health check information", nickname = "getHealthCheck", notes = "Get information about the health of the service", response = HealthCheck.class, tags={ "HealthCheck", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Success", response = HealthCheck.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class),
        @ApiResponse(code = 500, message = "The request cannot be fulfilled due to an unexpected server error", response = Error.class) })
    @GetMapping(
        value = "/healthCheck",
        produces = { "application/json" }
    )
    default ResponseEntity<HealthCheck> getHealthCheck() {
        HealthCheck healthCheck = new HealthCheck()
            .status(HealthCheck.StatusEnum.PASS);
        return new ResponseEntity<HealthCheck>(healthCheck, HttpStatus.OK);
    }

}
